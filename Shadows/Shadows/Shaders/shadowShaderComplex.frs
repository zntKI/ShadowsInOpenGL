#version 330 core

in VS_OUT {
	vec3 fragPos;
	vec3 normal;
	vec2 texCoords;

	vec4 fragPosLightSpace;
} i_fs;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;

uniform sampler2D u_ShadowMap;

uniform vec3 u_LightPos;
uniform vec3 u_ViewPos;

out vec4 o_fragColor;

float ShadowCalculation();

void main()
{
	vec3 color = texture(texture_diffuse1, i_fs.texCoords).rgb;
	vec3 normal = normalize(i_fs.normal);
	vec3 lightColor = vec3(1.0);

	// ambient
	vec3 ambient = 0.15 * color;

	//diffuse
	vec3 lightDir = normalize(u_LightPos - i_fs.fragPos);
	float diff = max(dot(lightDir, normal), 0.0);
	vec3 diffuse = diff * lightColor;

	//specular
	vec3 viewDir = normalize(u_ViewPos - i_fs.fragPos);
	float spec = 0.0;
	vec3 halfwayDir = normalize(lightDir + viewDir);
	spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);
	vec3  texSpecValue = vec3(texture(texture_specular1, i_fs.texCoords));
	vec3 specular = lightColor * (spec * texSpecValue);

	// Calculate shadow
	float shadowAmount = ShadowCalculation();
	vec3 lighting = ( ambient + (1.0 - shadowAmount) * (diffuse + specular) ) * color;

	o_fragColor = vec4(lighting, 1.0);
}

float ShadowCalculation()
{
	vec4 fragPosLightSpace = i_fs.fragPosLightSpace;

	// perform perspective divide
	// because we don't pass 'fragPosLightSpace' through 'gl_Position', this step is skipped so we have to do it manually
	vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5;

	float closestDepth = texture(u_ShadowMap, projCoords.xy).r;
	float currentDepth = projCoords.z;

	return (currentDepth > closestDepth ? 1.0 : 0.0);
}